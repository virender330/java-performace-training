package walmart;

import java.util.Scanner;

public class Ex2 {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter a item..:");
		String item=scan.next();
		Dog tiger=new Dog();
		tiger.play(item);
	}
}

class Dog{
	public void play(String item) {
		if(item.equals("stick")) {
			System.out.println("you beat I bite....");
		}
		else if(item.equals("blass")) {
			System.out.println("wow...let pray bro...");
		}
	}
	}
}



==============================================================
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Ex2 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("Please enter an item..:");
        String item = scan.next();
        Dog tiger = new Dog();
        tiger.play(item);
    }
}

class Dog {
    private final Map<String, String> actions;

    public Dog() {
        actions = new HashMap<>();
        actions.put("stick", "you beat I bite....");
        actions.put("blass", "wow...let pray bro...");
    }

    public void play(String item) {
        System.out.println(actions.getOrDefault(item, "not implemented"));
    }
}



==================================================================
package walmart;

import java.util.Scanner;

public class Ex2 {
	public static void main(String[] args)throws Exception {
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter a item..:");
		String itemclass=scan.next();
		Item item=(Item)Class.forName(itemclass).
					getConstructor().newInstance();
		GoodDog tiger=new GoodDog();
		tiger.play(item);
	}
}

class BadDog{
	public void play(String item) {
		if(item.equals("stick")) {
			System.out.println("you beat I bite....");
		}
		else if(item.equals("ball")) {
			System.out.println("wow...lets play bro...");
		}
	}
}
class GoodDog{
	public void play(Item item) {
		item.execute();
	}
}


abstract class Item{
	public abstract void execute();
}
class StickItem extends Item{
	public StickItem() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public void execute() {
		System.out.println("you beat I bite....");
	}
}
class BallItem extends Item{
	public BallItem() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public void execute() {
		System.out.println("wow....let us play bro...");
	}
}



===========

package walmart;

import java.util.Scanner;

public class Ex2 {
	public static void main(String[] args)throws Exception {
		GoodDog tiger=new GoodDog();
		Child baby=new Child();
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter a item..:");
		String itemclass=scan.next();
		Item item=(Item)Class.forName(itemclass).
					getConstructor().newInstance();

		baby.play(tiger, item);
	}
}
class Child{
	public void play(GoodDog dog,Item item) {
		try {
			dog.play(item);
		}catch(DogExceptions de) {
			System.out.println(de);
			de.visit();
		}
	}
}
class BadDog{
	public void play(String item) {
		if(item.equals("stick")) {
			System.out.println("you beat I bite....");

		}
		else if(item.equals("ball")) {
			System.out.println("wow...lets play bro...");
		}
	}
}
class GoodDog{
	public void play(Item item) throws DogExceptions{
		item.execute();
	}
}
abstract class DogExceptions extends Exception{
	@Override
	public String toString() {
		return "dog exceptions..";
	}
	public abstract void visit();
}
class DogBiteException extends DogExceptions{
	@Override
	public String toString() {
		return "dog bite exceptions..";
	}
	@Override
	public void visit() {
		System.out.println("dog bite exception is handled...");
	}
}
class DogPlayException extends DogExceptions{
	@Override
	public String toString() {
		return "dog Play exceptions..";
	}
	@Override
	public void visit() {
		System.out.println("dog play exception is handled...");
	}
}
class DogHurtException extends DogExceptions{
	@Override
	public String toString() {
		return "dog Hurt exceptions..";
	}
	@Override
	public void visit() {
		System.out.println("dog Hurt exception is handled...");
	}
}
abstract class Item{
	public abstract void execute()throws DogExceptions;
}
class StoneItem extends Item{
	public StoneItem() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public void execute() throws DogExceptions {
		System.out.println("dont throw it hurts......");
	}
}
class StickItem extends Item{
	public StickItem() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public void execute() throws DogBiteException {
		System.out.println("you beat I bite....");
		throw new DogBiteException();
	}
}
class BallItem extends Item{
	public BallItem() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public void execute()throws DogPlayException {
		System.out.println("wow....let us play bro...");
		throw new DogPlayException();
	}
}



=====================

package walmart;

import java.util.Scanner;

public class Ex3 {
	public static void main(String[] args) {
		BadFan shaitan=new BadFan();
		while(true) {
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter ..:");
		String item=scan.next();
			shaitan.pull();
		}
	}
}
class BadFan{
	int state=0;
	public void pull() {
		if(state==0) {
			System.out.println("switch on state....");
			state=1;
		}
		else if(state==1) {
			System.out.println("medium speed state...");
			state=2;
		}
		else if(state==2) {
			System.out.println("high speed state...");
			state=3;
		}
		else if(state==3) {
			System.out.println("switch off state...");
			state=0;
		}
	}
}



package walmart;

import java.util.Scanner;

public class Ex3 {
    public static void main(String[] args) {
        BadFan shaitan = new BadFan();
        while (true) {
            Scanner scan = new Scanner(System.in);
            System.out.println("Please enter ..:");
            String item = scan.next();
            shaitan.pull();
        }
    }
}

interface FanState {
    void pull(BadFan fan);
}

class SwitchOnState implements FanState {
    @Override
    public void pull(BadFan fan) {
        System.out.println("switch on state....");
        fan.setState(new MediumSpeedState());
    }
}

class MediumSpeedState implements FanState {
    @Override
    public void pull(BadFan fan) {
        System.out.println("medium speed state...");
        fan.setState(new HighSpeedState());
    }
}

class HighSpeedState implements FanState {
    @Override
    public void pull(BadFan fan) {
        System.out.println("high speed state...");
        fan.setState(new SwitchOffState());
    }
}

class SwitchOffState implements FanState {
    @Override
    public void pull(BadFan fan) {
        System.out.println("switch off state...");
        fan.setState(new SwitchOnState());
    }
}

class BadFan {
    private FanState state;

    public BadFan() {
        state = new SwitchOffState();
    }

    public void setState(FanState state) {
        this.state = state;
    }

    public void pull() {
        state.pull(this);
    }
}